name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PGDATADIR: /var/lib/postgresql/data

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Docs
        run: npx typedoc
      - uses: actions/upload-pages-artifact@v2
        with:
          path: ./docs
  test:
    services:
      postgres:
        image: postgres
        ports:
          - 5432/tcp
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        environment:
        - type: node
          version: 18.x
        - type: node
          version: 20.x
        - type: bun
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install zsh
      - run: |
          function set() {
              docker exec ${{ job.services.postgres.id }} sh -c "echo $1=\'$2\' >> $PGDATADIR/postgresql.conf"
          }
          set ssl on
          set ssl_cert_file /etc/ssl/certs/ssl-cert-snakeoil.pem
          set ssl_key_file /etc/ssl/private/ssl-cert-snakeoil.key
          set fsync off
          set full_page_writes off
          set synchronous_commit off
          docker kill --signal=SIGHUP ${{ job.services.postgres.id }}
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.environment.version }}
        if: matrix.environment.type == 'node'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.environment.version }}
      - name: Use Bun ${{ matrix.environment.version }}
        if: matrix.environment.type == 'bun'
        uses: oven-sh/setup-bun@v1
      - name: Install dependencies
        if: matrix.environment.type == 'node'
        run: npm ci
      - name: Run tests
        run: |
          case $ENVIRONMENT in
            node)
              npm run test:prod
              ;;
          esac
        env:
          ENVIRONMENT: ${{ matrix.environment.type }}
          PGSSLMODE: disable
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGUSER: postgres
          PGPASSWORD: postgres
      - name: Run tests (SSL)
        run: |
          docker cp ${{ job.services.postgres.id }}:/etc/ssl/certs/ssl-cert-snakeoil.pem ./
          gen_code() {
          cat <<- EOF
            import { Client } from '$1';
            const client = new Client();
            const info = await client.connect();
            console.log("Encrypted: " + info.encrypted);
            await client.end();
          EOF
          }
          set -o pipefail
          case $ENVIRONMENT in
            node)
              npm run test:prod || exit 1
              npm run build
              gen_code ./dist/src/index.js > test.mjs
              node test.mjs | tee /dev/stderr | grep true
              ;;
            bun)
              # Workaround: https://github.com/oven-sh/bun/issues/1590
              set -x
              dependencies=`jq -r '.dependencies|to_entries|map("\(.key)@\(.value)")|join(" ")' package.json`
              ( mkdir /tmp/bun && cd "$_" && ls -lah && bun install "$dependencies" && rm -rf `pwd`; )
              bun install -p --ignore-scripts
              bun build src/index.ts --target bun > ts-postgres.js
              gen_code ./ts-postgres.js > test.mjs
              bun test.mjs
              bun test.mjs | tee /dev/stderr | grep true
              ;;
          esac
        shell: zsh {0}
        env:
          ENVIRONMENT: ${{ matrix.environment.type }}
          NODE_EXTRA_CA_CERTS: ssl-cert-snakeoil.pem
          PGSSLMODE: require
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGUSER: postgres
          PGPASSWORD: postgres
  deploy:
    if: github.ref_name == 'master'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: [test, docs]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2